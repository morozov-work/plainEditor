function plainEditorStart(root) {
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/getHighlightButtons.js":
/*!************************************!*\
  !*** ./src/getHighlightButtons.js ***!
  \************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\nfunction getHighlightButtons(editorRoot) {\r\n\r\n    let highLight = {};\r\n\r\n    if (!editorRoot.textContent) {\r\n        highLight.tagArr = ['document-fragment'];\r\n        return highLight;\r\n    }\r\n\r\n    const selection = window.getSelection(), \r\n        getSelection = selection.getRangeAt(0).cloneContents(), \r\n        children = getSelection.children, \r\n        startCont = selection.getRangeAt(0).startContainer,\r\n        endCont = selection.getRangeAt(0).endContainer;\r\n\r\n    let tagArr = [], \r\n        justifyArr = [],\r\n        fontFamilyArr = [],\r\n        fontSizeArr = [],\r\n        lineHeightArr = [],\r\n        colorArr = [],\r\n        backgroundColorArr = [],\r\n        childArr = [],\r\n        collectionItem;\r\n\r\n    function pushToStyleArrays(element) { \r\n        if(element.style['text-align']) {\r\n            justifyArr.push(element.style['text-align']); \r\n        }\r\n\r\n        if(element.style['font-family']) {\r\n            fontFamilyArr.push(element.style['font-family']); \r\n        }\r\n\r\n        if(element.style['font-size']) {\r\n            fontSizeArr.push(element.style['font-size']); \r\n        }\r\n\r\n        if(element.style['line-height']) {\r\n            lineHeightArr.push(element.style['line-height']); \r\n        }\r\n\r\n        if(element.style.color) {\r\n            colorArr.push(element.style.color); \r\n        }\r\n\r\n        if(element.style['background-color']) {\r\n            backgroundColorArr.push(element.style['background-color']); \r\n        }\r\n    }\r\n\r\n\r\n    function pushResult(collection) {\r\n        function pushChildElements(child) { \r\n            if(child.children) {\r\n                let childItem;\r\n                for(childItem of child.children) {\r\n                    childArr.push(childItem.nodeName); \r\n                    pushToStyleArrays(childItem);\r\n                    pushChildElements(childItem);\r\n                } \r\n            }\r\n        }\r\n        for(collectionItem of collection) {\r\n            childArr.push(collectionItem.nodeName);\r\n            pushToStyleArrays(collectionItem); \r\n            pushResult(collectionItem.children);\r\n            pushChildElements(collectionItem);\r\n            tagArr.push(childArr); \r\n            childArr = [];  \r\n        }  \r\n    }\r\n\r\n    function pushIfStartIsEqualEnd() { \r\n        let parentElement = startCont.parentElement;\r\n        while(parentElement !== editorRoot) {\r\n            //if(parentElement !== null) { вылетает или виснет при использовании HR. родительская нода=null.\r\n                childArr.push(parentElement.nodeName);\r\n                pushToStyleArrays(parentElement); \r\n                parentElement = parentElement.parentNode;\r\n            //}    \r\n        }\r\n        if(parentElement === editorRoot) {\r\n            childArr.push('root');\r\n            }\r\n        tagArr.push(childArr);\r\n        childArr = []; \r\n    }\r\n\r\n    if(startCont.isEqualNode(endCont)) { \r\n        pushIfStartIsEqualEnd();\r\n    } else {  \r\n        childArr.push(startCont.parentElement.nodeName);\r\n        tagArr.push(childArr); \r\n        childArr = [];\r\n        pushResult(children);\r\n    }\r\n    tagArr = tagArr.filter(item => item.length !== 0); \r\n\r\n    highLight.tagArr = tagArr;\r\n    highLight.justifyArr = justifyArr;\r\n    highLight.fontFamilyArr = fontFamilyArr;\r\n    highLight.fontSizeArr = fontSizeArr;\r\n    highLight.lineHeightArr = lineHeightArr;\r\n    highLight.colorArr = colorArr;\r\n    highLight.backgroundColorArr = backgroundColorArr;  \r\n\r\n    return highLight; \r\n\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (getHighlightButtons);\n\n//# sourceURL=webpack://plaineditor/./src/getHighlightButtons.js?");

/***/ }),

/***/ "./src/highLightButtons.js":
/*!*********************************!*\
  !*** ./src/highLightButtons.js ***!
  \*********************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var _getHighlightButtons__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getHighlightButtons */ \"./src/getHighlightButtons.js\");\n\r\n\r\nfunction highLightButtons(arrayOfToolbarElementWithHighlight) {\r\n\r\n    const root = document.querySelector('.editor-textField');\r\n    const justityButtonsArr = [ \r\n                                    [document.querySelector('.toolbar-justifyCenter'), 'center'],\r\n                                    [document.querySelector('.toolbar-justifyFull'), 'justify'],\r\n                                    [document.querySelector('.toolbar-justifyLeft'), 'left'],\r\n                                    [document.querySelector('.toolbar-justifyRight'), 'right']\r\n                                ];\r\n\r\n    root.addEventListener('click', toggleSelectedButtons);\r\n    root.addEventListener('keydown', toggleSelectedButtons);\r\n\r\n    function toggleSelectedButtons() { \r\n        const highLight = (0,_getHighlightButtons__WEBPACK_IMPORTED_MODULE_0__.default)(root); \r\n        //console.log(highLight);\r\n        const arrayOfHighlightButtons = highLight.tagArr; \r\n\r\n\r\n        function toggleSelectedButton(button, tag) { \r\n            if(arrayOfHighlightButtons.every(arr => arr.includes(tag))) {\r\n                button.classList.add('selected'); \r\n            } else {\r\n                button.classList.remove('selected'); \r\n            }\r\n        }\r\n        arrayOfToolbarElementWithHighlight.forEach(button => { \r\n            toggleSelectedButton(button.element, button.tag); \r\n        });\r\n\r\n\r\n        justityButtonsArr.forEach(arr => { \r\n            toggleSelectedJustifyButton(arr[0], arr[1]);\r\n        });\r\n\r\n        function toggleSelectedJustifyButton(button, tag) {\r\n            if( \r\n                highLight.justifyArr &&\r\n                highLight.justifyArr[0] === tag &&\r\n                highLight.justifyArr.every(item => item === highLight.justifyArr[0])\r\n            ) {\r\n                button.classList.add('selected');\r\n            } else {\r\n                button.classList.remove('selected');\r\n            }\r\n        }\r\n\r\n\r\n\r\n        \r\n        toggleSelectedSelectButtons('fontName', \r\n                                    'Шрифт', \r\n                                    highLight.fontFamilyArr,\r\n                                    setValueOfSelect);\r\n\r\n        toggleSelectedSelectButtons( 'fontSize', \r\n                                    'Размер', \r\n                                    highLight.fontSizeArr,\r\n                                    setValueOfFontSize);\r\n\r\n\r\n        function toggleSelectedSelectButtons(selectClass, defaultValue, targetArr, setNewValue) {\r\n\r\n            const currentSelect = document.querySelector(`.toolbar-${selectClass}`);\r\n            \r\n            let currentValue = defaultValue; \r\n\r\n            if( targetArr && \r\n                targetArr.length !== 0 && \r\n                targetArr.every(item => item === targetArr[0]) \r\n                ) { \r\n                    const valueStr = targetArr[0],\r\n                        re = /\"/g,\r\n                        newStr = valueStr.replace(re, ''); \r\n                    \r\n                    currentValue = setNewValue(newStr, currentValue, selectClass);\r\n\r\n                } else {       \r\n                    currentValue = defaultValue; \r\n                } \r\n                            \r\n            currentSelect.value = currentValue; \r\n        }\r\n\r\n\r\n        function setValueOfSelect(newStr, currentValue, selectClass) { \r\n\r\n            const options = document.querySelectorAll(`.${selectClass}-option`);\r\n\r\n            options.forEach(option => {\r\n                if(option.value === newStr) {\r\n                    currentValue = option.value;\r\n                } \r\n            });\r\n            \r\n            return currentValue;\r\n        }\r\n\r\n\r\n\r\n\r\n        function setValueOfFontSize(newStr, currentValue) { \r\n            \r\n            switch(newStr) {\r\n                case 'x-small':\r\n                    currentValue = 1;\r\n                    break;\r\n                case 'small':\r\n                    currentValue = 2;\r\n                    break;\r\n                case 'medium':\r\n                    currentValue = 3;\r\n                    break;\r\n                case 'large':\r\n                    currentValue = 4;\r\n                    break;\r\n                case 'x-large':\r\n                    currentValue = 5;\r\n                    break;\r\n                case 'xx-large':\r\n                    currentValue = 6;\r\n                    break;\r\n                case 'xxx-large':\r\n                    currentValue = 7;\r\n                    break;\r\n                default:\r\n                    currentValue = 'Размер';\r\n                }\r\n                return currentValue;\r\n        }\r\n\r\n\r\n\r\n\r\n        function setValueOfLineHeightSelect() {\r\n            const lineHeight = document.querySelector('.toolbar-lineHeight');\r\n            const ancestorContainer = document.getSelection().getRangeAt(0).commonAncestorContainer;\r\n            \r\n            if(ancestorContainer.style && ancestorContainer.style['line-height']) {\r\n                lineHeight.value = ancestorContainer.style['line-height'];\r\n            } else if(ancestorContainer.parentElement.style && ancestorContainer.parentElement.style['line-height']) {\r\n                lineHeight.value = ancestorContainer.parentElement.style['line-height'];\r\n            } else {\r\n                lineHeight.value = 'Интервал';\r\n            }\r\n        }\r\n\r\n        setValueOfLineHeightSelect();\r\n\r\n\r\n\r\n\r\n        toggleSelectedColorButtons('toolbar-foreColor', '#ff0000', highLight.colorArr);\r\n        toggleSelectedColorButtons('toolbar-hiliteColor', '#ffff00', highLight.backgroundColorArr);\r\n\r\n        function toggleSelectedColorButtons(selectClass, defaultValue, targetArr) {\r\n\r\n            function rgbToHex(color) {\r\n                let colorInRgb = color.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i);\r\n            \r\n                return (colorInRgb && colorInRgb.length === 4) ? \"#\" +\r\n                    (\"0\" + parseInt(colorInRgb[1],10).toString(16)).slice(-2) +\r\n                    (\"0\" + parseInt(colorInRgb[2],10).toString(16)).slice(-2) +\r\n                    (\"0\" + parseInt(colorInRgb[3],10).toString(16)).slice(-2) : '';\r\n            }\r\n\r\n            const currentSelect = document.querySelector(`.${selectClass}`);\r\n            let currentValue = defaultValue;\r\n            \r\n            if( \r\n                targetArr && \r\n                targetArr.length !== 0 //&& \r\n                //targetArr.every(item => item === targetArr[0]) //  здесь че та не то я пока хз\r\n                ) { \r\n                    const valueStr = targetArr[0],\r\n                        valueInHex = rgbToHex(valueStr);\r\n\r\n                    currentValue = valueInHex;\r\n                } else {\r\n                    currentValue = defaultValue;\r\n                }\r\n\r\n            currentSelect.value = currentValue;\r\n        }\r\n    }\r\n\r\n    arrayOfToolbarElementWithHighlight.forEach(button => { \r\n        button.element.addEventListener('click', () => {\r\n            button.element.classList.toggle('selected');\r\n        });\r\n    });\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (highLightButtons);\r\n\r\n\n\n//# sourceURL=webpack://plaineditor/./src/highLightButtons.js?");

/***/ }),

/***/ "./src/plainEditorScript.js":
/*!**********************************!*\
  !*** ./src/plainEditorScript.js ***!
  \**********************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _renderPlainEditor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./renderPlainEditor */ \"./src/renderPlainEditor.js\");\n/* harmony import */ var _runPlainEditorToolbar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./runPlainEditorToolbar */ \"./src/runPlainEditorToolbar.js\");\n\r\n\r\n\r\n\r\n(0,_renderPlainEditor__WEBPACK_IMPORTED_MODULE_0__.default)(root);\r\n(0,_runPlainEditorToolbar__WEBPACK_IMPORTED_MODULE_1__.default)();\r\n\r\n\r\n\n\n//# sourceURL=webpack://plaineditor/./src/plainEditorScript.js?");

/***/ }),

/***/ "./src/renderPlainEditor.js":
/*!**********************************!*\
  !*** ./src/renderPlainEditor.js ***!
  \**********************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\nfunction renderPlainEditor(root) {\r\n\r\n    \r\n    const main = document.createElement('div');\r\n    main.classList.add('editor-main');\r\n    root.append(main);\r\n\r\n    const toolbar = document.createElement('div');\r\n    toolbar.classList.add('editor-toolbar');\r\n    main.append(toolbar);\r\n\r\n    const text = document.createElement('div');\r\n    text.classList.add('editor-textField');\r\n    text.setAttribute('contenteditable', 'true');\r\n    text.setAttribute('spellcheck', 'false');\r\n    main.append(text);\r\n\r\n\r\n\r\n\r\n\r\n    class ToolbarContainer {\r\n        constructor(htmlClass) {\r\n            this.htmlClass = htmlClass;\r\n        }\r\n        createContainer() {\r\n            const container = document.createElement('div');\r\n            container.classList.add('toolbar-container', this.htmlClass);\r\n            toolbar.append(container);\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    class ToolbarButton {\r\n        constructor(htmlClass, tooltip, content, parentClass) {\r\n            this.htmlClass = htmlClass;\r\n            this.tooltip = tooltip;\r\n            this.content = content;\r\n            this.parentContainer = document.querySelector(`.${parentClass}`);\r\n        }\r\n        \r\n        createButton() {\r\n            const btn = document.createElement('button');\r\n            btn.classList.add('toolbar-btn', `toolbar-${this.htmlClass}`);\r\n            btn.setAttribute('data-tooltip', this.tooltip);\r\n            btn.insertAdjacentHTML('afterbegin', this.content);\r\n            this.parentContainer.append(btn);\r\n        }\r\n    }\r\n\r\n    new ToolbarContainer('actions-container').createContainer(); // контейнер с кнопками \"отменить\", \"повторить\".\r\n\r\n    new ToolbarButton('undo', 'отменить', '↺', 'actions-container').createButton();\r\n    new ToolbarButton('redo', 'повторить', '↻', 'actions-container').createButton();\r\n\r\n\r\n\r\n\r\n\r\n    class ToolbarButtonWithSpanIcon extends ToolbarButton {\r\n        constructor(htmlClass, tooltip, number, parentClass) {\r\n            super(htmlClass, tooltip, parentClass);\r\n            this.parentContainer = document.querySelector(`.${parentClass}`);\r\n            this.number = number;\r\n            this.content = createContent(this.htmlClass, this.number);\r\n            \r\n            function createContent(htmlClass, number) { \r\n                let icon = '';\r\n                for(let i = 1; i <= number; i++) {\r\n                    const line = `<span class=\"${htmlClass}-container-${i}\"></span>`;\r\n                    icon += line;\r\n                }\r\n                return icon;\r\n            }\r\n        }\r\n    } \r\n\r\n    new ToolbarContainer('justify-container').createContainer(); \r\n\r\n    const arrayOfJustifyBtns = [\r\n                                    ['justifyCenter', 'по центру', 3],\r\n                                    ['justifyFull', 'по ширине', 3],\r\n                                    ['justifyLeft', 'по левому краю', 3],\r\n                                    ['justifyRight', 'по правому краю', 3]\r\n                                ];\r\n\r\n    arrayOfJustifyBtns.forEach(item => {\r\n        new ToolbarButtonWithSpanIcon(item[0], item[1], item[2], 'justify-container').createButton();\r\n    }); \r\n\r\n\r\n\r\n    new ToolbarContainer('textDecoration-container').createContainer(); \r\n\r\n    const arrayOftextDecorationBtns = [\r\n                                        ['bold', 'жирный', '<b>B</b>'],\r\n                                        ['italic', 'курсив', '<i>I</i>'],\r\n                                        ['underline', 'подчеркнутый', '<u>U</u>'],\r\n                                        ['strikethrough', 'зачеркнутый', '<strike>A</strike>'],\r\n                                        ['superscript', 'верхний индекс', 'X<sup>y</sup>'],\r\n                                        ['subscript', 'нижний индекс', 'X<sub>y</sub>'],\r\n                                        ['insertUnorderedList', 'ненумерованный список', '•'],\r\n                                        ['insertOrderedList', 'нумерованный список', '1.'],\r\n                                        ['picture', 'изображение', 'img'],\r\n                                        ['insertHorizontalRule', 'линия', '—'],\r\n                                        ['BLOCKQUOTE', 'цитата', '\" \"'],\r\n                                        ['H1', 'заголовок 1-го уровня', 'H1'],\r\n                                        ['H2', 'заголовок 2-го уровня', 'H2'],\r\n                                        ['H3', 'заголовок 3-го уровня', 'H3'],\r\n                                        ['insertHTML', 'вставить код', '&#60;/&#62;']\r\n\r\n                                    ];\r\n\r\n    arrayOftextDecorationBtns.forEach(item => {\r\n        new ToolbarButton(item[0], item[1], item[2], 'textDecoration-container').createButton();\r\n    }); \r\n\r\n\r\n\r\n    class ToolbarSelect { \r\n        constructor(htmlClass, content, selectName, parentClass) {\r\n            this.htmlClass = htmlClass;\r\n            this.content = content;\r\n            this.selectName = selectName;\r\n            this.parentContainer = document.querySelector(`.${parentClass}`);\r\n        }\r\n\r\n        createSelect() {\r\n            const select = document.createElement('select'); \r\n            select.classList.add('toolbar-select', `toolbar-${this.htmlClass}`);\r\n            this.parentContainer.append(select);\r\n\r\n            const selectName = document.createElement('option');\r\n            selectName.textContent = this.selectName; \r\n            selectName.setAttribute('selected', 'selected');\r\n            selectName.setAttribute('disabled', 'disabled');\r\n            select.append(selectName);\r\n\r\n            this.content.forEach(arr => { \r\n                const option = document.createElement('option');\r\n                option.setAttribute('value', arr[0]);\r\n                option.classList.add(`${this.htmlClass}-option`);\r\n                option.textContent = arr[1];\r\n                select.append(option);\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    new ToolbarContainer('selectableOptions-container').createContainer(); \r\n\r\n    const fontNameArray = [ \r\n                            [\"arial\", 'Arial'],\r\n                            [\"Courier New\", 'Courier New'],\r\n                            [\"georgia\", 'Georgia'],\r\n                            [\"impact\", 'Impact'],\r\n                            [\"roboto\", 'Tahoma'],\r\n                            [\"Times New Roman\", 'Times New Roman'],\r\n                            [\"verdana\", 'Verdana'] \r\n                        ];\r\n                    \r\n    new ToolbarSelect('fontName', fontNameArray, 'Шрифт', 'selectableOptions-container').createSelect();\r\n\r\n    const fontSizeArray = [[1, '10px'], [2, '12px'], [3, '14px'], [4, '16px'], \r\n                        [5, '18px'], [6, '21px'], [7, '26px'],]; \r\n\r\n    new ToolbarSelect('fontSize', fontSizeArray, 'Размер', 'selectableOptions-container').createSelect();\r\n\r\n    const lineHeightArray = [ [0.5, '0.5'], [0.75, '0.75'], [1, '1'], [1.5, '1.5'], [2, '2'] ];\r\n    \r\n\r\n    new ToolbarSelect('lineHeight', lineHeightArray, 'Интервал', 'selectableOptions-container').createSelect();\r\n    \r\n\r\n\r\n\r\n\r\n    class ToolbarInput {\r\n        constructor(htmlClass, inputName, inputType, inputValue, parentClass) {\r\n            this.htmlClass = htmlClass;\r\n            this.inputName = inputName;\r\n            this.inputType = inputType;\r\n            this.inputValue = inputValue;\r\n            this.parentContainer = document.querySelector(`.${parentClass}`);\r\n        }\r\n        createInput() {\r\n            const inputName = document.createElement('span');\r\n            inputName.textContent = this.inputName;\r\n            this.parentContainer.append(inputName);\r\n\r\n            const input = document.createElement('input');\r\n            input.classList.add(`toolbar-${this.htmlClass}`);\r\n            input.setAttribute('type', this.inputType);\r\n            input.setAttribute('value', this.inputValue);\r\n            this.parentContainer.append(input);\r\n        }\r\n    }\r\n\r\n    new ToolbarInput('foreColor', 'Цвет', 'color', '#ff0000', 'selectableOptions-container').createInput();\r\n    new ToolbarInput('hiliteColor', 'Фон', 'color', '#ffff00', 'selectableOptions-container').createInput();\r\n\r\n\r\n\r\n\r\n    new ToolbarContainer('contextOptions-container').createContainer();\r\n\r\n    const arrayOfContextOptions = [\r\n                                    ['selectAll', '', 'Select All'],\r\n                                    ['removeFormat', '', 'Clear All'],\r\n                                    ['delete', 'удалить', '&#10007;'],\r\n                                    ['cut', 'вырезать', '&#9988;']\r\n                                ];\r\n\r\n    arrayOfContextOptions.forEach(arr => {\r\n        new ToolbarButton(arr[0], arr[1], arr[2], 'contextOptions-container').createButton();\r\n    });\r\n\r\n\r\n    new ToolbarButtonWithSpanIcon('copy', 'копировать', 2, 'contextOptions-container').createButton();\r\n\r\n\r\n    new ToolbarButton('toUpperCase', 'верхний регистр', 'А&#8593;', 'contextOptions-container').createButton();\r\n    new ToolbarButton('toLowerCase', 'нижний регистр', 'а&#8595;', 'contextOptions-container').createButton();\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (renderPlainEditor);\n\n//# sourceURL=webpack://plaineditor/./src/renderPlainEditor.js?");

/***/ }),

/***/ "./src/runPlainEditorToolbar.js":
/*!**************************************!*\
  !*** ./src/runPlainEditorToolbar.js ***!
  \**************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => __WEBPACK_DEFAULT_EXPORT__\n/* harmony export */ });\n/* harmony import */ var _highLightButtons__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./highLightButtons */ \"./src/highLightButtons.js\");\n\r\n\r\nfunction runPlainEditorToolbar() {\r\n    class ToolbarElement { \r\n        constructor(htmlClass, command) {\r\n            this.htmlClass = htmlClass;\r\n            this.command = command;\r\n            this.element = document.querySelector(this.htmlClass);\r\n        }\r\n\r\n        addExecCommandForButton() {\r\n            this.element.addEventListener('click', (defaultUI = false, valueArg = null) => {\r\n                document.execCommand(this.command, defaultUI, valueArg);\r\n            }); \r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    class ToolbarElementInsertContent extends ToolbarElement { \r\n        constructor(htmlClass) {\r\n            super(htmlClass);\r\n            this.command = 'insertHTML';\r\n        }\r\n\r\n        insertPicture() {\r\n            this.element.addEventListener('click', () => {\r\n                const insertImg = prompt('Введите URL изображения');\r\n                if(insertImg !== null) {\r\n                    document.execCommand(this.command, false, `<img src=${insertImg}>`);\r\n                }   \r\n            });\r\n        }\r\n\r\n        insertHTML() {\r\n            this.element.addEventListener('click', () => {\r\n                if(document.getSelection().isCollapsed) { \r\n                    const insertText = prompt('Введите текст');\r\n                    if(insertText !== null) {\r\n                        document.execCommand('insertHTML', false, `<pre>${insertText}</pre>`); \r\n                    }\r\n                } else { \r\n                    document.execCommand(this.command, false, `<pre>${document.getSelection().toString()}</pre>`);\r\n                } \r\n            });\r\n        }\r\n\r\n        setLineHeight() {\r\n            this.element.addEventListener('input', () => {\r\n                const ancestorContainer = document.getSelection().getRangeAt(0).commonAncestorContainer;\r\n                \r\n                clearStyleOfDomFragment(ancestorContainer); \r\n\r\n                function clearStyleOfDomFragment(container) {\r\n\r\n                    if(container.style) {\r\n                        container.style['line-height'] = ''; \r\n                    } \r\n                    \r\n                    if(container.children) {\r\n                        const children = Array.from(container.children);\r\n                        //console.log(children);\r\n                        children.forEach(child => {\r\n                            clearStyleOfDomFragment(child);\r\n                        });\r\n                    } \r\n                }\r\n                \r\n                if(ancestorContainer.style) {\r\n                    ancestorContainer.style['line-height'] = this.element.value;\r\n                } else if (ancestorContainer.parentElement.style) { \r\n                    ancestorContainer.parentElement.style['line-height'] = this.element.value;\r\n                }   \r\n            });  \r\n        }\r\n    }\r\n\r\n    new ToolbarElementInsertContent('.toolbar-picture').insertPicture(); \r\n\r\n    new ToolbarElementInsertContent('.toolbar-insertHTML').insertHTML();\r\n\r\n    new ToolbarElementInsertContent('.toolbar-lineHeight').setLineHeight();\r\n\r\n\r\n\r\n\r\n    class ToolbarElementForToggleCase extends ToolbarElement { \r\n        constructor(htmlClass) {\r\n            super(htmlClass);\r\n            this.command = 'insertHTML';\r\n        }\r\n\r\n        UpperCase() {\r\n            this.element.addEventListener('click', () => {\r\n                document.execCommand( this.command, false, document.getSelection().toString().toUpperCase() );\r\n            });\r\n        }\r\n\r\n        LowerCase() {\r\n            this.element.addEventListener('click', () => {\r\n                document.execCommand(this.command, false, document.getSelection().toString().toLowerCase());\r\n            });\r\n        }\r\n    }\r\n    new ToolbarElementForToggleCase('.toolbar-toUpperCase').UpperCase();\r\n\r\n    new ToolbarElementForToggleCase('.toolbar-toLowerCase').LowerCase();\r\n\r\n\r\n\r\n\r\n    class ToolbarElementContext extends ToolbarElement { \r\n        constructor(htmlClass, command) {\r\n            super(htmlClass, command);\r\n            arrayOfToolbarElement.push(this); \r\n        }\r\n    } \r\n\r\n    const arrayOfToolbarElement = []; \r\n\r\n    const commandsElementContext = ['undo', 'redo', 'justifyCenter', 'justifyFull', 'justifyLeft', \r\n    'justifyRight', 'insertHorizontalRule', 'selectAll', 'delete', 'cut', 'copy', 'removeFormat'];\r\n\r\n    function createToolbarElement(arr, className) { \r\n        arr.forEach(elem => {\r\n            new className(`.toolbar-${elem}`, elem);\r\n        });\r\n    }\r\n\r\n    createToolbarElement(commandsElementContext, ToolbarElementContext);\r\n\r\n\r\n\r\n\r\n    class ToolbarElementWithTag extends ToolbarElement { \r\n        constructor(htmlClass, command, tag) { \r\n            super(htmlClass, command);\r\n            this.tag = tag;\r\n            arrayOfToolbarElement.push(this); \r\n            arrayOfToolbarElementWithHighlight.push(this); \r\n        }\r\n    }\r\n\r\n    const arrayOfToolbarElementWithHighlight = [];\r\n\r\n    const commandsToolbarElementWithTag = [ \r\n                                            ['bold', 'B'], \r\n                                            ['italic', 'I'], \r\n                                            ['underline', 'U'],\r\n                                            ['strikethrough', 'STRIKE'], \r\n                                            ['superscript', 'SUP'], \r\n                                            ['subscript', 'SUB'], \r\n                                            ['insertUnorderedList', 'UL'],\r\n                                            ['insertOrderedList', 'OL'] \r\n                                        ];\r\n\r\n    function createToolbarElementWithTag(arr) {\r\n        arr.forEach(elem => {\r\n            new ToolbarElementWithTag(`.toolbar-${elem[0]}`, elem[0], elem[1]);\r\n        });\r\n    }\r\n\r\n    createToolbarElementWithTag(commandsToolbarElementWithTag);\r\n\r\n\r\n\r\n\r\n\r\n\r\n    class ToolbarElementFormatBlock extends ToolbarElementWithTag {\r\n        constructor(htmlClass, tag) {\r\n            super(htmlClass);\r\n            this.tag = tag;\r\n            this.command = 'formatBlock';\r\n            this.valueArg = this.tag.toLowerCase();\r\n        }\r\n        addExecCommandForButton() {\r\n            this.element.addEventListener('click', (defaultUI = false) => {\r\n                document.execCommand(this.command, defaultUI, this.valueArg);\r\n            });\r\n        }\r\n    }\r\n\r\n    const commandsToolbarElementFormatBlock = ['BLOCKQUOTE', 'H1', 'H2', 'H3'];\r\n\r\n    createToolbarElement(commandsToolbarElementFormatBlock, ToolbarElementFormatBlock);\r\n\r\n    arrayOfToolbarElement.forEach(element => {\r\n        element.addExecCommandForButton();\r\n    });\r\n\r\n\r\n\r\n\r\n    class ToolbarElementWithInput extends ToolbarElement {\r\n        constructor(htmlClass, command) {\r\n            super(htmlClass, command);\r\n            arrayOfToolbarElementWithInput.push(this);\r\n        }\r\n        addExecCommandForInput() {\r\n            this.element.addEventListener('input', () => {\r\n            document.execCommand('styleWithCSS', false, true);\r\n            document.execCommand(this.command, false, this.element.value);\r\n            document.execCommand('styleWithCSS', false, false);\r\n            });\r\n        }\r\n    }\r\n\r\n    const arrayOfToolbarElementWithInput = [];\r\n\r\n    const commandsToolbarElementWithInput = ['fontName', 'fontSize', 'foreColor', 'hiliteColor'];\r\n\r\n    createToolbarElement(commandsToolbarElementWithInput, ToolbarElementWithInput);\r\n\r\n    arrayOfToolbarElementWithInput.forEach(element => {\r\n        element.addExecCommandForInput();\r\n    });\r\n\r\n\r\n\r\n\r\n    \r\n    (0,_highLightButtons__WEBPACK_IMPORTED_MODULE_0__.default)(arrayOfToolbarElementWithHighlight);\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (runPlainEditorToolbar);\r\n\r\n\r\n\n\n//# sourceURL=webpack://plaineditor/./src/runPlainEditorToolbar.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./src/plainEditorScript.js");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;
}